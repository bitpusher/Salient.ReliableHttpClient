<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CassiniDev4-lib</name>
    </assembly>
    <members>
        <member name="T:CassiniDev.BrowserTestResultItem">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.BrowserTestResultItem.Parse(System.String)">
            <summary>
            </summary>
            <param name="log"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CassiniDev.BrowserTestResultItem.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.BrowserTestResultItem.Success">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.BrowserTestResultItem.Name">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.BrowserTestResultItem.Failures">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.BrowserTestResultItem.Total">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.BrowserTestResultItem.Log">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.BrowserTestResultItem.Items">
            <summary>
            </summary>
        </member>
        <member name="T:CassiniDev.BrowserTestResults">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.BrowserTestResults.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.BrowserTestResults.#ctor(CassiniDev.RequestEventArgs)">
            <summary>
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="P:CassiniDev.BrowserTestResults.Success">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.BrowserTestResults.Url">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.BrowserTestResults.StatusCode">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.BrowserTestResults.Error">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.BrowserTestResults.Log">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.BrowserTestResults.Id">
            <summary>
            </summary>
        </member>
        <member name="T:CassiniDev.CassiniDevBrowserTest">
            <summary>
            A web test executor base on an idea from Nikhil Kothari's Script#
            http://projects.nikhilk.net/ScriptSharp
            
            TODO: finer grained control over browser instances.
            TODO: create parser/abstraction for RequestEventArgs
            </summary>
        </member>
        <member name="T:CassiniDev.CassiniDevServer">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.CassiniDevServer.NormalizeUrl(System.String)">
            <summary>
            Combine the RootUrl of the running web application with the relative url
            specified.
            </summary>
            <param name="relativeUrl"></param>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.CassiniDevServer.StartServer(System.String,System.String)">
            <summary>
            Will start specified application as "localhost" on loopback and first available port in the range 8000-10000 with vpath "/"
            </summary>
            <param name="applicationPath">Physical path to application.</param>
            <param name="virtualPath">Optional. defaults to "/"</param>
        </member>
        <member name="M:CassiniDev.CassiniDevServer.StartServer(System.String)">
            <summary>
            Will start specified application as "localhost" on loopback and first available port in the range 8000-10000 with vpath "/"
            </summary>
            <param name="applicationPath">Physical path to application.</param>
        </member>
        <member name="M:CassiniDev.CassiniDevServer.StartServer(System.String,System.Int32,System.String,System.String)">
            <summary>
            Will start specified application on loopback
            </summary>
            <param name="applicationPath">Physical path to application.</param>
            <param name="port">Port to listen on.</param>
            <param name="virtualPath">Optional. defaults to "/"</param>
            <param name="hostName">Optional. Is used to construct RootUrl. Defaults to "localhost"</param>
        </member>
        <member name="M:CassiniDev.CassiniDevServer.StartServer(System.String,System.Net.IPAddress,System.Int32,System.String,System.String)">
            <summary>
            </summary>
            <param name="applicationPath">Physical path to application.</param>
            <param name="ipAddress">IP to listen on.</param>
            <param name="port">Port to listen on.</param>
            <param name="virtualPath">Optional. default value '/'</param>
            <param name="hostname">Optional. Used to construct RootUrl. Defaults to 'localhost'</param>
        </member>
        <member name="M:CassiniDev.CassiniDevServer.StopServer">
            <summary>
            <para>Stops the server.</para>
            </summary>
        </member>
        <member name="M:CassiniDev.CassiniDevServer.Dispose">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.CassiniDevServer.Server">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.CassiniDevServer.ApplicationPath">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.CassiniDevServer.RootUrl">
            <summary>
            The root URL of the running web application
            </summary>
        </member>
        <member name="M:CassiniDev.CassiniDevBrowserTest.#ctor(System.String)">
            <summary>
            </summary>
            <param name="postKey"></param>
        </member>
        <member name="M:CassiniDev.CassiniDevBrowserTest.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.CassiniDevBrowserTest.RunTest(System.String)">
            <summary>
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.CassiniDevBrowserTest.RunTest(System.String,CassiniDev.WebBrowser)">
            <summary>
            </summary>
            <param name="url"></param>
            <param name="browser"></param>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.CassiniDevBrowserTest.RunTest(System.String,CassiniDev.WebBrowser,System.TimeSpan)">
            <summary>
            </summary>
            <param name="url"></param>
            <param name="browser"></param>
            <param name="timeout"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:CassiniDev.CassiniDevBrowserTest.PostKey">
            <summary>
            </summary>
        </member>
        <member name="T:CassiniDev.Configuration.CassiniDevConfigurationSection">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Configuration.CassiniDevConfigurationSection.Instance">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Configuration.CassiniDevConfigurationSection.Profiles">
            <summary>
            </summary>
        </member>
        <member name="T:CassiniDev.Configuration.CassiniDevProfileElement">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Configuration.CassiniDevProfileElement.Port">
            <summary>
            Port is used as profile selector
            </summary>
        </member>
        <member name="P:CassiniDev.Configuration.CassiniDevProfileElement.Path">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Configuration.CassiniDevProfileElement.HostName">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Configuration.CassiniDevProfileElement.IpAddress">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Configuration.CassiniDevProfileElement.IpMode">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Configuration.CassiniDevProfileElement.IpV6">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Configuration.CassiniDevProfileElement.Plugins">
            <summary>
            </summary>
        </member>
        <member name="T:CassiniDev.Configuration.CassiniDevProfileElementCollection">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.Configuration.CassiniDevProfileElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:CassiniDev.Configuration.CassiniDevProfileElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. </param>
        </member>
        <member name="T:CassiniDev.Configuration.PluginElement">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Configuration.PluginElement.Name">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Configuration.PluginElement.Type">
            <summary>
            </summary>
        </member>
        <member name="T:CassiniDev.Configuration.PluginElementCollection">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.Configuration.PluginElementCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:CassiniDev.Configuration.PluginElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. </param>
        </member>
        <member name="T:CassiniDev.ContentLocator">
            <summary>
              Walks up from the current execution directory looking for directoryName.
              This means that we can spin up a server on an arbitrary directory that is a child
              of any of the current directory's ancestors
            </summary>
        </member>
        <member name="T:CassiniDev.IContentLocator">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.IContentLocator.LocateContent">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.ContentLocator.#ctor(System.String)">
            <summary>
            </summary>
            <param name="directoryName"></param>
        </member>
        <member name="M:CassiniDev.ContentLocator.LocateContent">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:CassiniDev.Connection">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.Connection.Plugins">
            <summary>
            
            </summary>
        </member>
        <member name="M:CassiniDev.Connection.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:CassiniDev.Connection.InitializeLifetimeService">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.Connection.LogRequest(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="pathTranslated"></param>
            <param name="url"></param>
        </member>
        <member name="M:CassiniDev.Connection.LogRequestBody(System.Byte[])">
            <summary>
            
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:CassiniDev.Connection.LogRequestHeaders(System.String)">
            <summary>
            
            </summary>
            <param name="headers"></param>
        </member>
        <member name="M:CassiniDev.Connection.ReadRequestBytes(System.Int32)">
            <summary>
            
            </summary>
            <param name="maxBytes"></param>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.Connection.WaitForRequestBytes">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.Connection.Write100Continue">
            <summary>
            
            </summary>
        </member>
        <member name="M:CassiniDev.Connection.WriteBody(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:CassiniDev.Connection.WriteEntireResponseFromFile(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <param name="keepAlive"></param>
        </member>
        <member name="M:CassiniDev.Connection.WriteEntireResponseFromString(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="statusCode"></param>
            <param name="extraHeaders"></param>
            <param name="body"></param>
            <param name="keepAlive"></param>
        </member>
        <member name="M:CassiniDev.Connection.WriteErrorAndClose(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="statusCode"></param>
            <param name="message"></param>
        </member>
        <member name="M:CassiniDev.Connection.WriteErrorAndClose(System.Int32)">
            <summary>
            
            </summary>
            <param name="statusCode"></param>
        </member>
        <member name="M:CassiniDev.Connection.WriteErrorWithExtraHeadersAndKeepAlive(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="statusCode"></param>
            <param name="extraHeaders"></param>
        </member>
        <member name="M:CassiniDev.Connection.WriteHeaders(System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="statusCode"></param>
            <param name="extraHeaders"></param>
        </member>
        <member name="P:CassiniDev.Connection.Connected">
            <summary>
            
            </summary>
        </member>
        <member name="P:CassiniDev.Connection.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:CassiniDev.Connection.LocalIP">
            <summary>
            
            </summary>
        </member>
        <member name="P:CassiniDev.Connection.RemoteIP">
            <summary>
            
            </summary>
        </member>
        <member name="P:CassiniDev.Connection.RequestLog">
            <summary>
            
            </summary>
        </member>
        <member name="P:CassiniDev.Connection.ResponseLog">
            <summary>
            
            </summary>
        </member>
        <member name="T:CassiniDev.Host">
            <summary>
            01/01/10 sky: added HttpRuntime.Close to IRegisteredObject.Stop to eliminate 
                          System.AppDomainUnloadedException when running tests in NUnit GuiRunner.
                          reference: http://stackoverflow.com/questions/561402/cassini-webserver-webdev-nunit-and-appdomainunloadedexception
                          need to test thoroughly but seems to work just fine with no ill effects
            01.03.10 sky: removed the HttpRuntime.Close because, even though it tests fine, I am not entirely certain it is in the right place
                          and since I am no longer recommending that the server be used as a library in testing (run a console instance in a new process).
            04.20.11 sky: un-second-guessed myself and un-removed the initial fix. seems to have resolved the issue.
                          
            </summary>  
        </member>
        <member name="T:CassiniDev.Messages">
            <summary>
            TODO: get this into resources
            </summary>
        </member>
        <member name="M:CassiniDev.Request.TryParseRequest">
            <summary>
            TODO: defer response until request is written
            </summary>
            <returns></returns>
        </member>
        <member name="T:CassiniDev.RequestEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.RequestEventArgs.#ctor(System.Guid,CassiniDev.ServerLog.LogInfo,CassiniDev.ServerLog.LogInfo)">
            <summary>
            </summary>
            <param name="id"></param>
            <param name="requestLog"></param>
            <param name="responseLog"></param>
        </member>
        <member name="P:CassiniDev.RequestEventArgs.Id">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.RequestEventArgs.RequestLog">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.RequestEventArgs.ResponseLog">
            <summary>
            </summary>
        </member>
        <member name="T:CassiniDev.Server">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.Server.Plugins">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.Server.ApplicationManager">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.Server.#ctor(System.Int32,System.String,System.String)">
            <summary>
            </summary>
            <param name="port"></param>
            <param name="virtualPath"></param>
            <param name="physicalPath"></param>
        </member>
        <member name="M:CassiniDev.Server.#ctor(System.Int32,System.String)">
            <summary>
            </summary>
            <param name="port"></param>
            <param name="physicalPath"></param>
        </member>
        <member name="M:CassiniDev.Server.#ctor(System.String)">
            <summary>
            </summary>
            <param name="physicalPath"></param>
        </member>
        <member name="M:CassiniDev.Server.#ctor(System.Int32,System.String,System.String,System.Net.IPAddress,System.String,System.Boolean)">
            <summary>
            </summary>
            <param name="port"></param>
            <param name="virtualPath"></param>
            <param name="physicalPath"></param>
            <param name="ipAddress"></param>
            <param name="hostName"></param>
            <param name="requireAuthentication"></param>
        </member>
        <member name="M:CassiniDev.Server.#ctor(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            </summary>
            <param name="port"></param>
            <param name="virtualPath"></param>
            <param name="physicalPath"></param>
            <param name="requireAuthentication"></param>
        </member>
        <member name="M:CassiniDev.Server.#ctor(System.Int32,System.String,System.String,System.Net.IPAddress,System.String)">
            <summary>
            </summary>
            <param name="port"></param>
            <param name="virtualPath"></param>
            <param name="physicalPath"></param>
            <param name="ipAddress"></param>
            <param name="hostName"></param>
        </member>
        <member name="M:CassiniDev.Server.#ctor(System.Int32,System.String,System.String,System.Net.IPAddress,System.String,System.Boolean,System.Boolean)">
            <summary>
            </summary>
            <param name="port"></param>
            <param name="virtualPath"></param>
            <param name="physicalPath"></param>
            <param name="ipAddress"></param>
            <param name="hostName"></param>
            <param name="requireAuthentication"></param>
            <param name="disableDirectoryListing"></param>
        </member>
        <member name="M:CassiniDev.Server.#ctor(System.Int32,System.String,System.String,System.Net.IPAddress)">
            <summary>
            </summary>
            <param name="port"></param>
            <param name="virtualPath"></param>
            <param name="physicalPath"></param>
            <param name="ipAddress"></param>
        </member>
        <member name="M:CassiniDev.Server.#ctor(System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            </summary>
            <param name="port"></param>
            <param name="virtualPath"></param>
            <param name="physicalPath"></param>
            <param name="requireAuthentication"></param>
            <param name="disableDirectoryListing"></param>
        </member>
        <member name="M:CassiniDev.Server.#ctor(System.String,System.Boolean)">
            <summary>
            </summary>
            <param name="physicalPath"></param>
            <param name="requireAuthentication"></param>
        </member>
        <member name="M:CassiniDev.Server.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CassiniDev.Server.GetProcessToken">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.Server.GetProcessUser">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.Server.HostStopped">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.Server.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>
            An object of type <see cref="T:System.Runtime.Remoting.Lifetime.ILease"/> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"/> property.
            </returns>
            <exception cref="T:System.Security.SecurityException">The immediate caller does not have infrastructure permission. 
                            </exception><filterpriority>2</filterpriority><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="RemotingConfiguration, Infrastructure"/></PermissionSet>
        </member>
        <member name="M:CassiniDev.Server.OnRequestEnd(CassiniDev.Connection,System.String)">
            <summary>
            </summary>
            <param name="conn"></param>
            <param name="userName"></param>
        </member>
        <member name="M:CassiniDev.Server.Start">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.Server.Finalize">
            <summary>
            Allows an <see cref="T:System.Object"/> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:CassiniDev.Server.CreateWorkerAppDomainWithHost(System.String,System.String,System.Type,System.Int32)">
            <summary>
            
            </summary>
            <param name="virtualPath"></param>
            <param name="physicalPath"></param>
            <param name="hostType"></param>
            <param name="port"></param>
            <returns></returns>
            <remarks>
            This is Dmitry's hack to enable running outside of GAC.
            There are some errors being thrown when running in proc
            </remarks>
        </member>
        <member name="M:CassiniDev.Server.ShutDown">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Server.AppId">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Server.HostAppDomain">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Server.DisableDirectoryListing">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Server.RequireAuthentication">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Server.HostName">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Server.IPAddress">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Server.PhysicalPath">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Server.Port">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Server.RootUrl">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.Server.VirtualPath">
            <summary>
            </summary>
        </member>
        <member name="E:CassiniDev.Server.RequestComplete">
            <summary>
            </summary>
        </member>
        <member name="T:CassiniDev.LocalContentLocator">
            <summary>
              Locates content local to the project, e.g. copy always or deployment item/directory
            
              Depending on the runner in question, the content directory may be in any one over several relative locations. 
              Let's just start backing out of the current directory  looking for it...
            
              For MSTest we added a deployment directory so can find somewhere in the hierarchy /web 
              For NUnit the content will be in /deploy/web right here in /bin/xxx
            </summary>
        </member>
        <member name="M:CassiniDev.LocalContentLocator.LocateContent">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:CassiniDev.ServerLog.LogInfo">
            <summary>
            TODO: get rid of status code and url in the database and simply parse the headers
            </summary>
        </member>
        <member name="M:CassiniDev.ServerLog.LogInfo.Clone">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:CassiniDev.ServerLog.LogInfo.Body">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.ServerLog.LogInfo.ConversationId">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.ServerLog.LogInfo.Created">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.ServerLog.LogInfo.Exception">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.ServerLog.LogInfo.Headers">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.ServerLog.LogInfo.Identity">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.ServerLog.LogInfo.PathTranslated">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.ServerLog.LogInfo.PhysicalPath">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.ServerLog.LogInfo.RowId">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.ServerLog.LogInfo.RowType">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.ServerLog.LogInfo.StatusCode">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.ServerLog.LogInfo.Url">
            <summary>
            </summary>
        </member>
        <member name="T:CassiniDev.UIComponents.CommandLine">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.UIComponents.CommandLine.#ctor(System.String[])">
            <summary>
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:CassiniDev.UIComponents.CommandLine.Arguments">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.UIComponents.CommandLine.Options">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.UIComponents.CommandLine.ShowHelp">
            <summary>
            </summary>
        </member>
        <member name="T:CassiniDev.CommandLineArguments">
            <summary>
            Command line arguments
            
            fixed 5/24/10 - quoted embedded spaces in ToString
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.Browse">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.AddHost">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.ApplicationPath">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.EnableLogging">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.HostName">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.IPAddress">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.IPMode">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.IPv6">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.Nodirlist">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.Ntlm">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.Port">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.PortMode">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.PortRangeEnd">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.PortRangeStart">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.RunMode">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.Silent">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.TimeOut">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.VirtualPath">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.VisualStudio">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.CommandLineArguments.WaitForPort">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.CommandLineArguments.ToArgs">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.CommandLineArguments.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CassiniDev.CommandLineArguments.Validate">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.CommandLineArguments.ParseIP(CassiniDev.IPMode,System.Boolean,System.String)">
            <summary>
            Converts CommandLineArgument values to an IP address if possible.
            Throws Exception if not.
            </summary>
            <param name="ipmode"></param>
            <param name="v6"></param>
            <param name="ipString"></param>
            <returns></returns>
            <exception cref="T:CassiniDev.CassiniException">If IPMode is invalid</exception>
            <exception cref="T:CassiniDev.CassiniException">If IPMode is 'Specific' and ipString is invalid</exception>
        </member>
        <member name="T:CassiniDev.CommandLineParser">
             <summary>
             Parser for command line arguments.
            
             The parser specification is infered from the instance fields of the object
             specified as the destination of the parse.
             Valid argument types are: int, uint, string, bool, enums
             Also argument types of Array of the above types are also valid.
             
             Error checking options can be controlled by adding a ArgumentAttribute
             to the instance fields of the destination object.
            
             At most one field may be marked with the DefaultArgumentAttribute
             indicating that arguments without a '-' or '/' prefix will be parsed as that argument.
            
             If not specified then the parser will infer default options for parsing each
             instance field. The default long name of the argument is the field name. The
             default short name is the first character of the long name. Long names and explicitly
             specified short names must be unique. Default short names will be used provided that
             the default short name does not conflict with a long name or an explicitly
             specified short name.
            
             Arguments which are array types are collection arguments. Collection
             arguments can be specified multiple times.
             
             
                Usage
                -----
            
                Parsing command line arguments to a console application is a common problem. 
                This library handles the common task of reading arguments from a command line 
                and filling in the values in a type.
            
                To use this library, define a class whose fields represent the data that your 
                application wants to receive from arguments on the command line. Then call 
                CommandLine.ParseArguments() to fill the object with the data 
                from the command line. Each field in the class defines a command line argument. 
                The type of the field is used to validate the data read from the command line. 
                The name of the field defines the name of the command line option.
            
                The parser can handle fields of the following types:
            
                - string
                - int
                - uint
                - bool
                - enum
                - array of the above type
            
                For example, suppose you want to read in the argument list for wc (word count). 
                wc takes three optional boolean arguments: -l, -w, and -c and a list of files.
            
                You could parse these arguments using the following code:
            
                class WCArguments
                {
                    public bool lines;
                    public bool words;
                    public bool chars;
                    public string[] files;
                }
            
                class WC
                {
                    static void Main(string[] args)
                    {
                        if (CommandLine.ParseArgumentsWithUsage(args, parsedArgs))
                        {
                        //     insert application code here
                        }
                    }
                }
            
                So you could call this aplication with the following command line to count 
                lines in the foo and bar files:
            
                    wc.exe /lines /files:foo /files:bar
            
                The program will display the following usage message when bad command line 
                arguments are used:
            
                    wc.exe -x
            
                Unrecognized command line argument '-x'
                    /lines[+|-]                         short form /l
                    /words[+|-]                         short form /w
                    /chars[+|-]                         short form /c
                    /files:&lt;string>                     short form /f
                    @&lt;file>                             Read response file for more options
            
                That was pretty easy. However, you realy want to omit the "/files:" for the 
                list of files. The details of field parsing can be controled using custom 
                attributes. The attributes which control parsing behaviour are:
            
                ArgumentAttribute 
                    - controls short name, long name, required, allow duplicates, default value
                    and help text
                DefaultArgumentAttribute 
                    - allows omition of the "/name".
                    - This attribute is allowed on only one field in the argument class.
            
                So for the wc.exe program we want this:
            
                using System;
                using Utilities;
            
                class WCArguments
                {
                    [Argument(ArgumentType.AtMostOnce, HelpText="Count number of lines in the input text.")]
                    public bool lines;
                    [Argument(ArgumentType.AtMostOnce, HelpText="Count number of words in the input text.")]
                    public bool words;
                    [Argument(ArgumentType.AtMostOnce, HelpText="Count number of chars in the input text.")]
                    public bool chars;
                    [DefaultArgument(ArgumentType.MultipleUnique, HelpText="Input files to count.")]
                    public string[] files;
                }
            
                class WC
                {
                    static void Main(string[] args)
                    {
                        WCArguments parsedArgs = new WCArguments();
                        if (CommandLine.ParseArgumentsWithUsage(args, parsedArgs))
                        {
                        //     insert application code here
                        }
                    }
                }
            
            
            
                So now we have the command line we want:
            
                    wc.exe /lines foo bar
            
                This will set lines to true and will set files to an array containing the 
                strings "foo" and "bar".
            
                The new usage message becomes:
            
                    wc.exe -x
            
                Unrecognized command line argument '-x'
                /lines[+|-]  Count number of lines in the input text. (short form /l)
                /words[+|-]  Count number of words in the input text. (short form /w)
                /chars[+|-]  Count number of chars in the input text. (short form /c)
                @&lt;file>      Read response file for more options
                &lt;files>      Input files to count. (short form /f)
            
                If you want more control over how error messages are reported, how /help is 
                dealt with, etc you can instantiate the CommandLine.Parser class.
            
            
            
                Cheers,
                Peter Hallam
                C# Compiler Developer
                Microsoft Corp.
            
            
            
            
                Release Notes
                -------------
            
                10/02/2002 Initial Release
                10/14/2002 Bug Fix
                01/08/2003 Bug Fix in @ include files
                10/23/2004 Added user specified help text, formatting of help text to 
                        screen width. Added ParseHelp for /?.
                11/23/2004 Added support for default values.
                02/23/2005 Fix bug with short name and default arguments.
            
                12/24/2009 sky: Added ushort as valid argument type. 
                12/27/2009 sky: todo: expose out and err to enable use in forms app.
                12/29/2009 sky: added ArgumentsAttribute and GetGenericUsageString to allow attaching generic help text
                01/01/2010 sky: split classes into seperate files
                01/01/2010 sky: cleaned up Parser.cs
                05/22/2010 sky: major cleanup - more to come.
             </summary>
        </member>
        <member name="F:CassiniDev.CommandLineParser.NewLine">
            <summary>
            The System Defined new line string.
            </summary>
        </member>
        <member name="M:CassiniDev.CommandLineParser.#ctor">
            <summary>
            Don't ever call this.
            </summary>
        </member>
        <member name="M:CassiniDev.CommandLineParser.#ctor(System.Type,CassiniDev.ErrorReporter)">
            <summary>
            Creates a new command line argument parser.
            </summary>
            <param name="argumentSpecification"> The type of object to  parse. </param>
            <param name="reporter"> The destination for parse errors. </param>
        </member>
        <member name="M:CassiniDev.CommandLineParser.ArgumentsUsage(System.Type)">
            <summary>
            Returns a Usage string for command line argument parsing.
            Use ArgumentAttributes to control parsing behaviour.
            Formats the output to the width of the current console window.
            </summary>
            <param name="argumentType"> The type of the arguments to display usage for. </param>
            <returns> Printable string containing a user friendly description of command line arguments. </returns>
        </member>
        <member name="M:CassiniDev.CommandLineParser.ArgumentsUsage(System.Type,System.Int32)">
            <summary>
            Returns a Usage string for command line argument parsing.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="argumentType"> The type of the arguments to display usage for. </param>
            <param name="columns"> The number of columns to format the output to. </param>
            <returns> Printable string containing a user friendly description of command line arguments. </returns>
        </member>
        <member name="M:CassiniDev.CommandLineParser.GetConsoleWindowWidth">
            <summary>
            Returns the number of columns in the current console window
            </summary>
            <returns>Returns the number of columns in the current console window</returns>
        </member>
        <member name="M:CassiniDev.CommandLineParser.GetUsageString(System.Int32)">
            <summary>
            A user firendly usage string describing the command line argument syntax.
            </summary>
        </member>
        <member name="M:CassiniDev.CommandLineParser.IndexOf(System.Text.StringBuilder,System.Char,System.Int32)">
            <summary>
            Searches a StringBuilder for a character
            </summary>
            <param name="text"> The text to search. </param>
            <param name="value"> The character value to search for. </param>
            <param name="startIndex"> The index to stat searching at. </param>
            <returns> The index of the first occurence of value or -1 if it is not found. </returns>
        </member>
        <member name="M:CassiniDev.CommandLineParser.LastIndexOf(System.Text.StringBuilder,System.Char,System.Int32)">
            <summary>
            Searches a StringBuilder for a character in reverse
            </summary>
            <param name="text"> The text to search. </param>
            <param name="value"> The character to search for. </param>
            <param name="startIndex"> The index to start the search at. </param>
            <returns>The index of the last occurence of value in text or -1 if it is not found. </returns>
        </member>
        <member name="M:CassiniDev.CommandLineParser.Parse(System.String[],System.Object)">
            <summary>
            Parses an argument list.
            </summary>
            <param name="args"> The arguments to parse. </param>
            <param name="destination"> The destination of the parsed arguments. </param>
            <returns> true if no parse errors were encountered. </returns>
        </member>
        <member name="M:CassiniDev.CommandLineParser.ParseArguments(System.String[],System.Object)">
            <summary>
            Parses Command Line Arguments. 
            Errors are output on Console.Error.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="arguments"> The actual arguments. </param>
            <param name="destination"> The resulting parsed arguments. </param>
            <returns> true if no errors were detected. </returns>
        </member>
        <member name="M:CassiniDev.CommandLineParser.ParseArguments(System.String[],System.Object,CassiniDev.ErrorReporter)">
            <summary>
            Parses Command Line Arguments. 
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="arguments"> The actual arguments. </param>
            <param name="destination"> The resulting parsed arguments. </param>
            <param name="reporter"> The destination for parse errors. </param>
            <returns> true if no errors were detected. </returns>
        </member>
        <member name="M:CassiniDev.CommandLineParser.ParseArgumentsWithUsage(System.String[],System.Object)">
            <summary>
            Parses Command Line Arguments. Displays usage message to Console.Out
            if /?, /help or invalid arguments are encounterd.
            Errors are output on Console.Error.
            Use ArgumentAttributes to control parsing behaviour.
            </summary>
            <param name="arguments"> The actual arguments. </param>
            <param name="destination"> The resulting parsed arguments. </param>
            <returns> true if no errors were detected. </returns>
        </member>
        <member name="M:CassiniDev.CommandLineParser.ParseHelp(System.String[])">
            <summary>
            Checks if a set of arguments asks for help.
            </summary>
            <param name="args"> Args to check for help. </param>
            <returns> Returns true if args contains /? or /help. </returns>
        </member>
        <member name="M:CassiniDev.CommandLineParser.GetGenericUsageString(System.Reflection.ICustomAttributeProvider,System.Int32)">
            <summary>
            01/01/2010 sky
            </summary>
        </member>
        <member name="M:CassiniDev.CommandLineParser.ParseArgumentList(System.Collections.Generic.IEnumerable{System.String},System.Object)">
            <summary>
            Parses an argument list into an object
            </summary>
            <param name="args"></param>
            <param name="destination"></param>
            <returns> true if an error occurred </returns>
        </member>
        <member name="P:CassiniDev.CommandLineParser.HasDefaultArgument">
            <summary>
            Does this parser have a default argument.
            </summary>
            <value> Does this parser have a default argument. </value>
        </member>
        <member name="T:CassiniDev.ErrorReporter">
            <summary>
            A delegate used in error reporting.
            </summary>
        </member>
        <member name="T:CassiniDev.DefaultArgumentAttribute">
            <summary>
            Indicates that this argument is the default argument.
            '/' or '-' prefix only the argument value is specified.
            The ShortName property should not be set for DefaultArgumentAttribute
            instances. The LongName property is used for usage text only and
            does not affect the usage of the argument.
            </summary>
        </member>
        <member name="T:CassiniDev.ArgumentAttribute">
            <summary>
            Allows control of command line parsing.
            Attach this attribute to instance fields of types used
            as the destination of command line argument parsing.
            </summary>
        </member>
        <member name="M:CassiniDev.ArgumentAttribute.#ctor(CassiniDev.ArgumentType)">
            <summary>
            Allows control of command line parsing.
            </summary>
            <param name="type"> Specifies the error checking to be done on the argument. </param>
        </member>
        <member name="P:CassiniDev.ArgumentAttribute.DefaultLongName">
            <summary>
            Returns true if the argument did not have an explicit long name specified.
            </summary>
        </member>
        <member name="P:CassiniDev.ArgumentAttribute.DefaultShortName">
            <summary>
            Returns true if the argument did not have an explicit short name specified.
            </summary>
        </member>
        <member name="P:CassiniDev.ArgumentAttribute.DefaultValue">
            <summary>
            The default value of the argument.
            </summary>
        </member>
        <member name="P:CassiniDev.ArgumentAttribute.HasDefaultValue">
            <summary>
            Returns true if the argument has a default value.
            </summary>
        </member>
        <member name="P:CassiniDev.ArgumentAttribute.HasHelpText">
            <summary>
            Returns true if the argument has help text specified.
            </summary>
        </member>
        <member name="P:CassiniDev.ArgumentAttribute.HelpText">
            <summary>
            The help text for the argument.
            </summary>
        </member>
        <member name="P:CassiniDev.ArgumentAttribute.LongName">
            <summary>
            The long name of the argument.
            Set to null means use the default long name.
            The long name for every argument must be unique.
            It is an error to specify a long name of String.Empty.
            </summary>
        </member>
        <member name="P:CassiniDev.ArgumentAttribute.ShortName">
            <summary>
            The short name of the argument.
            Set to null means use the default short name if it does not
            conflict with any other parameter name.
            Set to String.Empty for no short name.
            This property should not be set for DefaultArgumentAttributes.
            </summary>
        </member>
        <member name="P:CassiniDev.ArgumentAttribute.Type">
            <summary>
            The error checking to be done on the argument.
            </summary>
        </member>
        <member name="M:CassiniDev.DefaultArgumentAttribute.#ctor(CassiniDev.ArgumentType)">
            <summary>
            Indicates that this argument is the default argument.
            </summary>
            <param name="type"> Specifies the error checking to be done on the argument. </param>
        </member>
        <member name="T:CassiniDev.ArgumentType">
            <summary>
            Used to control parsing of command line arguments.
            </summary>
        </member>
        <member name="F:CassiniDev.ArgumentType.Required">
            <summary>
            Indicates that this field is required. An error will be displayed
            if it is not present when parsing arguments.
            </summary>
        </member>
        <member name="F:CassiniDev.ArgumentType.Unique">
            <summary>
            Only valid in conjunction with Multiple.
            Duplicate values will result in an error.
            </summary>
        </member>
        <member name="F:CassiniDev.ArgumentType.Multiple">
            <summary>
            Inidicates that the argument may be specified more than once.
            Only valid if the argument is a collection
            </summary>
        </member>
        <member name="F:CassiniDev.ArgumentType.AtMostOnce">
            <summary>
            The default type for non-collection arguments.
            The argument is not required, but an error will be reported if it is specified more than once.
            </summary>
        </member>
        <member name="F:CassiniDev.ArgumentType.LastOccurenceWins">
            <summary>
            For non-collection arguments, when the argument is specified more than
            once no error is reported and the value of the argument is the last
            value which occurs in the argument list.
            </summary>
        </member>
        <member name="F:CassiniDev.ArgumentType.MultipleUnique">
            <summary>
            The default type for collection arguments.
            The argument is permitted to occur multiple times, but duplicate 
            values will cause an error to be reported.
            </summary>
        </member>
        <member name="T:CassiniDev.ArgumentsAttribute">
            <summary>
            Allows attaching generic help text to arguments class
            
            12/29/09 sky: added 
            </summary>
        </member>
        <member name="P:CassiniDev.ArgumentsAttribute.HasHelpText">
            <summary>
            Returns true if the argument has help text specified.
            </summary>
        </member>
        <member name="P:CassiniDev.ArgumentsAttribute.HelpText">
            <summary>
            The help text for the argument.
            </summary>
        </member>
        <member name="M:CassiniDev.CommonExtensions.GetContentType(System.String)">
            <summary>
            CassiniDev FIX: #12506
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.CommonExtensions.GetMimeFromFile(System.String)">
            <summary>
            CassiniDev FIX: #12506
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:CassiniDev.RunState">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.RunState.Idle">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.RunState.Running">
            <summary>
            
            </summary>
        </member>
        <member name="T:CassiniDev.PortMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.PortMode.FirstAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.PortMode.Specific">
            <summary>
            
            </summary>
        </member>
        <member name="T:CassiniDev.ErrorField">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.ErrorField.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.ErrorField.ApplicationPath">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.ErrorField.VirtualPath">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.ErrorField.HostName">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.ErrorField.IsAddHost">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.ErrorField.IPAddress">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.ErrorField.IPAddressAny">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.ErrorField.IPAddressLoopBack">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.ErrorField.Port">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.ErrorField.PortRangeStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.ErrorField.PortRangeEnd">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.ErrorField.PortRange">
            <summary>
            
            </summary>
        </member>
        <member name="T:CassiniDev.IPMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.IPMode.Loopback">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.IPMode.Any">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.IPMode.Specific">
            <summary>
            
            </summary>
        </member>
        <member name="T:CassiniDev.RunMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.RunMode.Server">
            <summary>
            
            </summary>
        </member>
        <member name="F:CassiniDev.RunMode.Hostsfile">
            <summary>
            
            </summary>
        </member>
        <member name="T:CassiniDev.CassiniException">
            <summary>
            
            </summary>
        </member>
        <member name="T:CassiniDev.HostsFile">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.HostsFile.AddHostEntry(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="ipAddress"></param>
            <param name="hostname"></param>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.HostsFile.RemoveHostEntry(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="ipAddress"></param>
            <param name="hostname"></param>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.Interop.FindMimeFromData(System.IntPtr,System.String,System.Byte[],System.Int32,System.String,System.Int32,System.IntPtr@,System.Int32)">
            <summary>
            FIX: #12506
            </summary>
        </member>
        <member name="T:CassiniDev.CassiniNetworkUtils">
            <summary>
            </summary>
        </member>
        <member name="M:CassiniDev.CassiniNetworkUtils.GetLocalAddresses">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.CassiniNetworkUtils.GetAvailablePort(System.Int32,System.Int32,System.Net.IPAddress,System.Boolean)">
            <summary>
            Returns first available port on the specified IP address. 
            The port scan excludes ports that are open on ANY loopback adapter. 
            
            If the address upon which a port is requested is an 'ANY' address all 
            ports that are open on ANY IP are excluded.
            </summary>
            <param name="rangeStart"></param>
            <param name="rangeEnd"></param>
            <param name="ip">The IP address upon which to search for available port.</param>
            <param name="includeIdlePorts">If true includes ports in TIME_WAIT state in results. 
            TIME_WAIT state is typically cool down period for recently released ports.</param>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.CassiniNetworkUtils.GetExternalIPV4">
            <summary>
             Returns the first IPV4 address available for this host.
             This is typically an external IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.CassiniNetworkUtils.GetHostName">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.CassiniNetworkUtils.GetIPAdresses">
            <summary>
             Gets all IP addresses for this host
            </summary>
        </member>
        <member name="M:CassiniDev.CassiniNetworkUtils.IsPortAvailable(System.Net.IPAddress,System.Int32)">
            <summary>
            Gently polls specified IP:Port to determine if it is available.
            </summary>
            <param name="ipAddress"></param>
            <param name="port"></param>
        </member>
        <member name="M:CassiniDev.CassiniNetworkUtils.NormalizeUrl(System.String,System.String)">
            <summary>
            Combine the RootUrl of the running web application with the relative url
            specified.
            </summary>
            <param name="rootUrl"></param>
            <param name="relativeUrl"></param>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.CassiniNetworkUtils.ParseIPString(System.String)">
            <summary>
            </summary>
            <param name="ipString"></param>
            <returns></returns>
        </member>
        <member name="M:CassiniDev.CassiniNetworkUtils.ValidateHostName(System.String)">
            <summary>
            <para>
            Hostnames are composed of series of labels concatenated with dots, as are all domain names[1]. 
            For example, "en.wikipedia.org" is a hostname. Each label must be between 1 and 63 characters long, 
            and the entire hostname has a maximum of 255 characters.</para>
            <para>
            The Internet standards (Request for Comments) for protocols mandate that component hostname 
            labels may contain only the ASCII letters 'a' through 'z' (in a case-insensitive manner), the digits 
            '0' through '9', and the hyphen. The original specification of hostnames in RFC 952, mandated that 
            labels could not start with a digit or with a hyphen, and must not end with a hyphen. However, a 
            subsequent specification (RFC 1123) permitted hostname labels to start with digits. No other symbols, 
            punctuation characters, or blank spaces are permitted.</para>
            </summary>
            <param name="hostname"></param>
            <returns></returns>
            http://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names
        </member>
        <member name="T:CassiniDev.CassiniDevBrowserTestFixture`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CassiniDev.CassiniDevBrowserTestFixture`1.RunTest">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.CassiniDevBrowserTestFixture`1.Browser">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.CassiniDevBrowserTestFixture`1.Path">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.CassiniDevBrowserTestFixture`1.Url">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.CassiniDevBrowserTestFixture`1.TimeOut">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.CassiniDevBrowserTestFixture`1.Results">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.CassiniDevBrowserTestFixture`1.PostKey">
            <summary>
            </summary>
        </member>
        <member name="T:CassiniDev.QUnitExBrowserTestResultItem">
            <summary>
              NOTE: there seems to be a 7k limit on data posted from the test so
              be concious of the data you log
            </summary>
        </member>
        <member name="M:CassiniDev.QUnitExBrowserTestResultItem.Parse(System.String)">
            <summary>
            </summary>
            <param name="log"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:CassiniDev.WebBrowser">
            <summary>
            A simple user agent locator - derived from Nikhil Kothari's Script#
            http://projects.nikhilk.net/ScriptSharp
            I would have written it, but how many ways are there to get paths from
            the registry?
            
            TODO:  Add Opera
            </summary>
        </member>
        <member name="F:CassiniDev.WebBrowser.Chrome">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.WebBrowser.Firefox">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.WebBrowser.InternetExplorer">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.WebBrowser.Safari">
            <summary>
            </summary>
        </member>
        <member name="F:CassiniDev.WebBrowser.Opera">
            <summary>
            </summary>
        </member>
        <member name="P:CassiniDev.WebBrowser.Name">
            <summary>
            </summary>
        </member>
    </members>
</doc>
